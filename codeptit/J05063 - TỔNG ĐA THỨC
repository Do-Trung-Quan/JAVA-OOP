import java.util.*;
import java.io.*;
import java.io.File;


public class Solution{
    static class DaThuc{
        Map<Integer, Integer> mp = new HashMap<>();
        
        public DaThuc(String s){
            for(String x :s.split("\\+")){
                String s1 = x.trim().split("\\*x\\^")[0];
                String s2 = x.trim().split("\\*x\\^")[1];
                this.mp.put(Integer.parseInt(s2), this.mp.getOrDefault(Integer.parseInt(s2), 0)+Integer.parseInt(s1));
            }
        }
        
        public DaThuc(Map<Integer, Integer> map){
            this.mp = map;
        }
        
        public DaThuc cong(DaThuc A){
            Map<Integer, Integer> clone = new HashMap<>(this.mp);
            for(int x:A.mp.keySet()){
                clone.put(x, clone.getOrDefault(x, 0) + A.mp.get(x));
            }
            return new DaThuc(clone);
        }
        
        @Override
        public String toString(){
            StringBuilder ans = new StringBuilder();
            List<Integer> res = new ArrayList<>(mp.keySet());
            res.sort(Collections.reverseOrder());
            for(int x:res){
                ans.append(Integer.toString(mp.get(x))+"*x^"+Integer.toString(x)+" + ");
            }
            ans.delete(ans.length()-3, ans.length());
            return ans.toString().trim();
        }
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = Integer.parseInt(sc.nextLine());
        while(t-->0){
            DaThuc p = new DaThuc(sc.nextLine());
            DaThuc q = new DaThuc(sc.nextLine());
            DaThuc r = p.cong(q);
            System.out.println(r);
        }
    }
    public static void main310398(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = Integer.parseInt(sc.nextLine());
        while(t-->0){
            DaThuc p = new DaThuc(sc.nextLine());
            DaThuc q = new DaThuc(sc.nextLine());
            DaThuc r = p.cong(q);
            System.out.println(r);
        }
    }
}

/*
1 2 3 4
4 2 3 1
2 4 1 3
1 1 1
2 2 2
3 3 3
4 4 4
*/
